<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.UserMapper">
<!--namespace属性指的就是持久层mapper中的接口-->
<!--在这里resultMap标签是查询结果的列名和实体类的属性名的对应关系，也就是说我们类中的属性名不一定和数据库中的保持一致，column是数据库中表的字段名，property是实体类的属性名-->
    <resultMap id="BaseResultMap" type="User">
        <result column="id" jdbcType="INTEGER" property="id" />
        <result column="user_name" jdbcType="VARCHAR" property="userName" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="user_avatar" jdbcType="VARCHAR" property="userAvatar" />
        <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    </resultMap>

<!--    sql用于定义可复用的SQL语句块，列出数据库字段名-->
    <sql id="Base_Column_List">
        id,user_name,password,user_avatar,create_date
    </sql>

<!--    AAAAAAAAAAAAAAAAAAAA-->
    <select id="selectAllUsers" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" /> FROM tb_user
    </select>

<!--    BBBBBBBBBBBBBBBBBBBB-->
    <select id="selectUsersByLimit" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" /> FROM tb_user LIMIT #{offset}, #{limit}
    </select>

<!--    CCCCCCCCCCCCCCCCCCCC-->
<!--    验证格式#{}将传入的参数当成一个字符串，会给传入的参数加一个双引号-->
<!--    ${}将传入的参数直接显示生成在sql中，不会添加引号-->
    <select id="selectBySearch" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM tb_user
        WHERE ${condition} LIKE CONCAT('%',#{content},'%')
    </select>

<!--    DDDDDDDDDDDDDDDDDDDD-->
    <select id="selectUsersCount">
        SELECT COUNT(*) FROM tb_user
    </select>

<!--    EEEEEEEEEEEEEEEEEEEE-->
    <select id="selectByPrimaryKey" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM tb_user
        WHERE `id` = #{id}
    </select>

<!--    FFFFFFFFFFFFFFFFFFFF-->
<!--    VALUES写property-->
    <insert id="insertUser">
        <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO tb_user (user_name,password,user_avatar,create_date) VALUES (#{userName},#{password},#{userAvatar}, NOW())
    </insert>

<!--    GGGGGGGGGGGGGGGGGGGG-->
    <delete id="deleteUser">
        DELETE FROM tb_user
        WHERE `id` = #{id}
    </delete>

<!--    HHHHHHHHHHHHHHHHHHHH-->
    <update id="updateUser" parameterType="User">
        UPDATE tb_user SET id = #{id},user_name = #{userName},password = #{password},user_avatar = #{userAvatar},create_date = #{createDate}
        WHERE `id` = #{id}
    </update>

<!--    IIIIIIIIIIIIIIIIIIII-->
    <update id="patchUser" parameterType="User">
        UPDATE tb_user
--         trim属性的顺序可以修改
        <trim prefix="SET" suffixOverrides="," suffix=" WHERE id=#{id}">
            <if test ="userName!=null and userName.trim()!=''">user_name = #{userName},</if>
            <if test ="password!=null and password.trim()!=''">password = #{password},</if>
            <if test ="userAvatar!=null and userAvatar.trim()!=''">user_avatar = #{userAvatar},</if>
            <if test ="createDate!=null and createDate.trim()!=''">create_date = #{createDate},</if>
        </trim>
    </update>
</mapper>